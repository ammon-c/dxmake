
     make (1)                  DXMake version 1.5                  make (1)



     NAME 
          make - script-driven build utility 

     SYNOPSIS 
          make [options] [macro=string ...] [targetfile ...] 

     DESCRIPTION 
          Make  builds  files  based on instructions in a script file,
          called a makefile.  The makefile describes each file that is 
          to be built in terms of what other  file(s)  are  needed  to
          build  the  file and what commands must be executed to build
          the file.  

          The files that are to be built are called  target  files  or
          targets.  

          The  files  that  are  needed to build a particular file are
          called dependent files or dependents.  

          By constructing an appropriate  makefile  for  a  particular
          target, it is possible to update the target quickly, because 
          make  will  only  execute  commands for dependent files that
          have  been  changed,  rather  than  executing  all  the  the
          commands to build the target from scratch.  

          When  make  processes the makefile, it checks to see if each
          target file is up-to-date.  A target  is  considered  to  be
          up-to-date  if it exists and if its timestamp is at least as
          new as the timestamps of each of the dependent files.  

          In the makefile, the complete description  of  a  particular
          target,  including  its dependents and commands, is called a
          target description.  The template for a  target  description
          is shown below.  

                        target [targets...] : [dependents...]
                            [command]
                                .
                                .
                            [command]

          The  first  line  of  a target description is written in the
          makefile as a target filename,  followed  by  a  colon  (:),
          followed by  the names of the target's dependent files.  The
          first line of a target description must  be  left  justified
          (the first character on the line must be the first character 
          of the  target  filename).    Multiple  target  files can be
          listed on the same line if they use the same dependent files 
          and commands.  

          The lines following the first line of the target description 
          contain the commands that must  be  executed  to  build  the
          target file.   Each of the command lines must be indented to
          distinguish  them  from  lines  which   begin   new   target
          descriptions.  




     make                             -1-                              make


     make (1)                  DXMake version 1.5                  make (1)


          A  command  may be preceeded by one of the following command
          prefixes,  which  instruct  make  to   treat   the   command
          specially: 

          @ 
              Instructs  make  not  to  display  the  command as it is
              executed.  Normally make displays each command  that  it
              executes.  

          - 
              Instructs   make  to  ignore  the  return  code  of  the
              command.  Normally make stops processing immediately  if
              a command returns with a return code other than zero.  

          For  a  brief  example  of  a  makefile,  assume that a file
          'test.obj' depends on the files 'test.c'  and  'test.h'  and
          that  the  command  'cl  -c -AS test.c' is used to build the
          target file 'test.obj'.  The makefile might look like: 

                        test.obj:  test.c test.h
                            cl -c -AS test.c

          When processing this makefile, make will  check  to  see  if
          'test.obj'  exists  and if it is at least as new as 'test.c'
          and 'test.h'. If 'test.obj' doesn't exist, or if 'test.c' or 
          'test.h' are newer, make executes the command 'cl -c test.c' 
          to bring the target file up-to-date.  If either of the files 
          'test.c' or 'test.h' is missing, make will stop  and  output
          an error saying that it doesn't know how to make the missing 
          dependent file.  

          If  the  makefile contains more than one target description,
          make will build the first target described in the  makefile,
          unless other target(s) were given as arguments to make.  

          Target descriptions  are  treated recursively by make.  If a
          dependent file for a particular target is also listed  as  a
          target elsewhere in the makefile, make will attempt to bring 
          the  dependent file up-to-date before checking to see if the
          original target is up-to-date.  

          Observe the following example: 

                        test.exe:  test.obj test2.obj
                            link test test2, test.exe;
                    
                        test.obj:  test.c test.h
                            cl -c -AS test.c
                    
                        test2.obj:  test2.c test.h
                            cl -c -AS test2.c

          In  the  example  (above),  make  will  examine  the  target
          description  for the target file 'test.exe', and see that it
          depends on the files 'test.obj' and 'test2.obj'. Since these 
          dependent files are also  named  as  targets  later  in  the
          makefile,  make  will  examine  those target descriptions to
          ensure  that  they  are  up-to-date  before   returning   to


     make                             -2-                              make


     make (1)                  DXMake version 1.5                  make (1)


          'test.exe' to ensure that it is up-to-date.  

          If 'test.c' or 'test.h' are newer than 'test.obj', make will 
          execute  the  command  'cl  -c  test.c'  to bring 'test.obj'
          up-to-date.  

          If 'test2.c' or 'test.h' are newer  than  'test2.obj',  make
          will   execute   the   command  'cl  -c  test2.c'  to  bring
          'test2.obj' up-to-date.  

          Now that the dependents for 'test.exe' are up-to-date,  make
          will   return   to  examine  'test.exe'.  If  'test.obj'  or
          'test2.obj' are newer than 'test.exe', make will execute the 
          command 'link test test2,  test.exe;'  to  bring  'test.exe'
          up-to-date.  

          Note  that  the  example  makefile  (above)  could have been
          written as: 

                        test.exe:  test.c test2.c test.h
                            cl -c -AS test.c
                            cl -c -AS test2.c
                            link test test2, test.exe;

          ...but this would execute all three commands  even  if  only
          one of  the files were out-of-date.  Generally, splitting up
          the build process for a particular target file into as  many
          target   descriptions   as  possible  results  in  the  most
          efficient makefile  in  terms  of  the  number  of  commands
          executed per make session.  


          Macros 

          Make  allows  the  makefile  to  be simplified by the use of
          macros.  A macro definition assigns a string of  text  to  a
          given name.    When  the  macro name is invoked later in the
          makefile, the string of text is inserted into the text where 
          the macro invocation appears.  

          A macro is defined by writing a macro name,  an  equal  sign
          '=', and  a  string.   For example, to define a macro CFLAGS
          which  will  contain  the  string  '-c  -AS  -Gs  -Ox',  the
          following would be written in the makefile: 

              CFLAGS=-c -AS -Gs -Ox 

          Note  that  no  space  is  used  on either side of the equal
          sign.  

          To invoke a macro, a dollar sign '$', followed by the  macro
          name  inside  of parenthesis, is written at the place in the
          makefile where the macro text should be inserted.    If  the
          macro  name  is only one character long, the parenthesis are
          optional.  





     make                             -3-                              make


     make (1)                  DXMake version 1.5                  make (1)


          The following makefile shows an example  of  a  macro  being
          defined and invoked: 

                        CFLAGS=-c -AS -Gs -Ox
                    
                        test.exe: test.obj sample.obj
                            link test.obj sample.obj, test.exe;
                    
                        test.obj: test.c test.h
                            cl $(CFLAGS) -Fotest.obj test.c
                    
                        sample.obj: sample.c sample.h test.h
                            cl $(CFLAGS) -Fosample.obj sample.c

          In  addition  to  macros  defined in the makefile, make also
          reads the operating system environment, so that  any  string
          which  is defined in the operating system environment may be
          invoked as a macro in the makefile.  If a macro  is  defined
          which  has  the same name as one of the environment strings,
          the environment  string  will  be  overriden  by  the  macro
          definition,   unless  the  '-e'  option  is  used  (this  is
          explained in more detail later).  
          
          In addition to macros defined in  the  makefile  and  macros
          read from the operating system environment, make understands 
          several special macros: 

          $* 
              Expands   to   the   basename  of  the  targetfile  (the
              targetfile's name minus the file extension).  

          $@ 
              Expands to the filename of the current targetfile.  

          $< 
              Expands to the dependent file upon  which  an  inference
              rule depends.    This  macro  may only be used within an
              inference rule  description  (rules  will  be  explained
              later).  

          $** 
              Expands  to  a  list  of all the dependent files for the
              current target file.  

          $?  
              Expands to a list of the dependent files that are  newer
              than the current target file.  













     make                             -4-                              make


     make (1)                  DXMake version 1.5                  make (1)


          The previous example makefile could be simplified by the use 
          of some of these special macros, as follows: 

                        CFLAGS=-c -AS -Gs -Ox
                    
                        test.obj: test.c test.h
                            cl $(CFLAGS) -Fo$@ $*.c
                    
                        sample.obj: sample.c sample.h test.h
                            cl $(CFLAGS) -Fo$@ $*.c
                    
                        test.exe: test.obj sample.obj
                            link $**, $@;

          In  addition  to macros defined in the makefile, environment
          strings,  and  special  macros,  the  following  macros  are
          predefined.  

          MAKE 
              is set to the name that make was invoked with.  

          MAKEDIR 
              is  set to the name of the current directory at the time
              make is invoked.  

          MAKEFLAGS 
              is set to the command line options that make was invoked 
              with (excluding '-f' and '-w').  

          The recommended procedure for reinvoking make  inside  of  a
          makefile  is  to  use the predefined macros MAKE and MAKEDIR
          rather than hard-coding a  make  command  in  the  makefile,
          i.e.: 

              $(MAKE) $(MAKEFLAGS) targets...  


          Inference Rules 

          The  makefile may contain inference rules which describe how
          to build files with a particular file extension  from  files
          with another  file extension.  An inference rule begins with
          a left-justified line containing a dot '.', followed by  the
          file  extension  of  the  dependent  file  type, followed by
          another  dot,  followed  by  the  file  extension   of   the
          targetfile type,   followed  by  a  colon.    The  following
          indented lines contain the commands that must be executed in 
          order to build the targetfile from the dependent file.   For
          example,  an  inference rule to build ".obj" files from ".c"
          files might look as follows: 

                        .c.obj:
                            cl -c -AS -Gs -Ox -Fo$*.obj $<







     make                             -5-                              make


     make (1)                  DXMake version 1.5                  make (1)


          Using an inference  rule,  we  could  further  simplify  the
          previous example makefile as follows: 

                        CFLAGS=-c -AS -Gs -Ox
                    
                        .c.obj:
                            cl $(CFLAGS) -Fo$*.obj $<
                    
                        test.obj: test.c
                    
                        sample.obj: sample.c
                    
                        test.exe: test.obj sample.obj
                            link $**, $@;

          In  the  above  example,  make  will  now infer how to build
          'test.obj' from 'test.c', and how to build 'sample.obj' from 
          'sample.c', rather than requiring that the build command  be
          placed under each ".obj" targetfile description.  

          Make  may  be  given  a  list of suffixes to be searched for
          matches to inference rules,  allowing  the  makefile  to  be
          further simplified.        The   pseudo-target   '.SUFFIXES'
          accomplishes this.    The  symbol  '.SUFFIXES'   should   be
          followed  by  a colon, and then a list of the suffixes to be
          handled.  For example: 

                        CFLAGS=-c -AS -Gs -Ox
                    
                        .SUFFIXES: .c
                    
                        .c.obj:
                            cl $(CFLAGS) -Fo$*.obj $<
                    
                        test.exe: test.obj sample.obj
                            link $**, $@;

          Note  that  if  '.SUFFIXES'  is  used  without  a  list   of
          extensions,  any  list from a previous '.SUFFIXES' statement
          will be erased.  

          In the example above, make will see that 'test.exe'  depends
          on  'test.obj'  and  'sample.obj'.  It will then decide that
          since there is no target  description  for  'test.obj',  the
          suffixes will  be  tested.  Make takes the basename from the
          file,  in  this  case  'test',  adds  a  suffix   from   the
          '.SUFFIXES',  in  this case '.c', and tests for the presence
          of the new filename, in this case 'test.c'.  Make will  then
          check  if  there is a rule for building the target file from
          the new filename.  In this example,  there  is  a  rule  for
          building  '.obj'  files  from '.c' files, so make will build
          'test.obj'  from  'test.c',  providing  the  file   'test.c'
          exists.   This same process will be used for the undescribed
          target file 'sample.obj'.  






     make                             -6-                              make


     make (1)                  DXMake version 1.5                  make (1)


          Psuedo-Targets 

          Make recognizes several psuedo-targets which modify the  way
          make behaves.    The '.SUFFIXES' psuedo-target was explained
          previously.  

          .IGNORE 
              instructs  make  to  ignore  the  return  codes  of  any
              commands it  executes.    Normally  make stop processing
              immediately if a command returns a non-zero exit code.  

          .PRECIOUS 
              instructs make not to delete specific target files if  a
              command  to build the target fails to return with a zero
              exit code.    Normally  make  deletes  the   (presumably
              incorrect)  target file if a command to build the target
              file returns  with  a  non-zero  exit  code.    In   the
              makefile,  '.PRECIOUS'  must  be followed by a colon and
              one or more filenames which are not to be deleted.  

          .SILENT 
              instructs make not to display commands.   Normally  make
              displays each command as it is executed.  


          Directives 

          Directives modify  the  way  make  reads the makefile.  Each
          directive begins with an exclamation mark (!) at  the  start
          of  the  line,  followed  by  the  directive  name  and  any
          necessary arguments.  The directives recognized by make  are
          described below.  

          !IFDEF name 
              reads  lines normally from the makefile until a !ELSE or
              !ENDIF directive is encountered if the  macro  specified
              by   the  'name'  argument  is  defined;  otherwise  the
              following lines are skipped up  to  the  next  !ELSE  or
              !ENDIF directive.  

          !IFNDEF name 
              reads  lines normally from the makefile until a !ELSE or
              !ENDIF directive is encountered if the  macro  specified
              by  the  'name'  argument  is not defined; otherwise the
              following lines are skipped up  to  the  next  !ELSE  or
              !ENDIF directive.  

          !ELSE 
              If  the  lines  following the previous !IFDEF or !IFNDEF
              were skipped, the lines following !ELSE  will  be  read;
              otherwise  the  lines following !ELSE will be skipped up
              to the next !ENDIF directive.  

          !ENDIF 
              marks the end of the  lines  effected  by  the  previous
              !IFDEF, !IFNDEF, or !ELSE directive.  




     make                             -7-                              make


     make (1)                  DXMake version 1.5                  make (1)


          !ERROR message 
              instructs   make  to  immediately  stop  processing  the
              makefile and output the text specified by the  'message'
              argument.  

          Whitespace   may   optionally   be   inserted   between  the
          exclamation  mark  and  the  directive  name,  provided  the
          exclamation mark remains the first character on the line.  

          Directives may be nested to a depth of seven levels.  


          Other Features 

          Comments  may  be  inserted  into  the makefile by placing a
          pound character (#) at the beginning of the comment line.  

          Long lines in the makefile may be split into multiple  lines
          if necessary.  If make encounters a backslash '\' at the end 
          of  a  line, it assumes that the next line is a continuation
          of the same line.  In order to have  a  line  that  actually
          ends with a backslash, two backslashes must be placed at the 
          end of the line.  

          Make  can  take  default  macros  and inference rules from a
          configuration file.  Make will search the current  directory
          and  the  directories  named  in the MS-DOS PATH environment
          variable for a file called make.inf.  If this file is found, 
          make will read the macros and inference rules  contained  in
          it.   If  macros or inference rules in the makefile conflict
          with those found in the configuration file, those defined in 
          the makefile will take precedence.  


          Options 

          -a 
              Instructs make to build the targets even if they are not 
              out-of-date.  Normally make only builds a target if  its
              dependents are newer.  

          -c 
              Instructs   make  to  display  its  name,  version,  and
              coypright notice before processing the makefile.  

          -d 
              Enables debugging output.  

          -e 
              Causes strings from the operating system environment  to
              override macros  defined  in  the  makefile.    Normally
              macros in the makefile have precedence.  

          -f 
              Specifies what file to use as a makefile.   The  default
              is  "Makefile". The filename must immediately follow the
              'f' in the argument list, with no intervening space.  



     make                             -8-                              make


     make (1)                  DXMake version 1.5                  make (1)


          -i 
              Instructs make to ignore the return  codes  of  executed
              commands.   By  default,  make  will stop when a command
              returns a non-zero exit code.  Using this option is  the
              same   as  placing  a  '.IGNORE'  psuedo-target  in  the
              makefile.  

          -n 
              Instructs make  to  display  commands  but  not  execute
              them.  

          -p 
              Instructs  make  to  output the contents of its internal
              data  structures,  including  macros,  rules,  suffixes,
              precious filenames, and targets.  

          -q 
              Enables query  mode.   Make will perform no actions, but
              instead will return an exit code to indicate whether the 
              specified targetfile(s) are up to date.    If  the  exit
              code  is  zero,  the  target(s)  were  determined  to be
              up-to-date; otherwise one or more of the  target(s)  was
              determined to be out-of-date.  

          -r 
              Disables reading  of  the initialization file.  Normally
              make  reads  macros  and  inference   rules   from   the
              "make.inf" file, if found.  

          -s 
              Enables  silent mode, in which make will not display the
              commands that are executed.  Normally make displays each 
              command as it is executed.  Using  this  option  is  the
              same   as  placing  a  '.SILENT'  pseudo-target  in  the
              makefile.  

          -t 
              Instructs make to update the timestamps on  the  targets
              instead   of   executing  the  commands  to  update  the
              targets.  

          -w 
              Specifies what directory to use as the  current  working
              directory.  The default is the current working directory 
              at the  time  make  is invoked.  The directory name must
              immediately follow the 'w' in the argument list, with no 
              intervening space.  

          -y 
              Instructs make to consider a targetfile to be up-to-date 
              if its timestamp is newer than the timestamps of each of 
              its  dependent  files;  otherwise,  make   considers   a
              targetfile  to  be  up-to-date if its timestamp is newer
              than or equal to the timestamps of each of its dependent 
              files.  





     make                             -9-                              make


     make (1)                  DXMake version 1.5                  make (1)


          -?  
              Outputs the copyright and a summary of the program.   If
              this  option  is given, no other arguments may be given.
              This  option  is  not  available  when   running   under
              Microsoft Windows.  


     NOTES 
          When  running  under MS-DOS, the default action performed by
          make when no command line arguments are given is to read the 
          makefile named Makefile and build the first target described 
          therein.  When running under Microsoft Windows, the  default
          action  performed by make when no command line arguments are
          given is to put up a dialog box from which the command  line
          arguments can  be  chosen  interactively.   Once the desired
          arguments  have  been  chosen,  clicking  the  'OK'   button
          continues   execution  with  the  chosen  arguements,  while
          clicking the 'Cancel' button terminates execution.  

          When running under MS-DOS, subprocesses invoked by make have 
          less memory available to them than  if  invoked  outside  of
          make.   Make  uses approximately 50 kilobytes of memory when
          running (possibly more depending on the  complexity  of  the
          makefile).  

          When  running under Microsoft Windows, if make encounters an
          error, it will wait for a response at  the  keyboard  before
          terminating.   Otherwise,  make terminates as soon as it has
          completed building target file(s).  

          When running under Microsoft Windows, make uses TOOLHELP.DLL 
          to check the return codes of each command that is  executed.
          If  TOOLHELP.DLL  is  not present, or if a Microsoft Windows
          version prior to 3.1 is hosting make, the  return  codes  of
          the  commands  executed  by make cannot be checked, in which
          case make will assume that every command  completes  with  a
          return code  of zero.  If make does not detect TOOLHELP.DLL,
          a warning message will be displayed when make is invoked.  

          When running under Microsoft Windows, make may be aborted by 
          using the mouse  to  access  the  Close  menu  item  in  the
          control-menu  at  the  upper left-hand corner of the window.
          If make is still  executing  a  command  when  aborted,  the
          command will continue to run after make terminates.  

     FILES 
          Makefile, make.inf 

     BUGS 
          The "$?"   special macro does not work correctly; it expands
          to a list  of  all  dependent  files  instead  of  just  the
          out-of-date dependent files.  

     ACKNOWLEDGEMENTS 
          MS-DOS  is a registered trademarks of Microsoft Corporation.
          Microsoft Windows is a trademark of Microsoft Corporation.  




     make                             -10-                             make

